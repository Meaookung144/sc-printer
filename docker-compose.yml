version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: sc-printer-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: sc_printer
      POSTGRES_USER: sc_printer_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - sc-printer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sc_printer_user -d sc_printer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Print API
  print-api:
    build:
      context: ./python-api
      dockerfile: Dockerfile
    container_name: sc-printer-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - sc-printer-network
    volumes:
      # Mount print directory for file access
      - print_files:/app/files
      # Mount system printer access (for Linux/Unix systems)
      - /var/run/cups/cups.sock:/var/run/cups/cups.sock
    environment:
      - PYTHONPATH=/app
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sc-printer-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://sc_printer_user:${DB_PASSWORD:-secure_password_123}@database:5432/sc_printer
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-change-this-in-production}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - PYTHON_API_URL=http://print-api:8000
    volumes:
      - print_files:/app/public/uploads
      - print_files:/app/public/print
    networks:
      - sc-printer-network
    depends_on:
      database:
        condition: service_healthy
      print-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sc-printer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - sc-printer-network
    depends_on:
      - frontend
      - print-api
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  print_files:
    driver: local

networks:
  sc-printer-network:
    driver: bridge