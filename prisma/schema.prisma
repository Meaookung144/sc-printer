generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  accounts Account[]
  sessions Session[]
  printJobs PrintJob[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PrintJob {
  id          String @id @default(cuid())
  userId      String
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  fileType    String
  
  copies      Int @default(1)
  isDraft     Boolean @default(false)
  isColor     Boolean @default(false)
  orientation String @default("portrait")
  pages       String? // "all" or "1-3,5,7-10"
  
  printerName String
  status      String @default("pending") // pending, printing, completed, failed
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("print_jobs")
}

model Printer {
  id         String  @id @default(cuid())
  name       String  @unique
  isOnline   Boolean @default(false)
  driverName String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("printers")
}